This is a fork! What comes below was only partially written by myself and it is super awesome.
I followed this blog post to adapt the config-repo to my needs: https://gist.github.com/domenkozar/b3c945035af53fa816e0ac460f1df853

---

Hi there! That's my dotfiles. Most of config files are now generated by [[http://orgmode.org/worg/org-contrib/babel/][org-babel]] fromonfig files just in case I won't have access to my Emacs. However, I recommend against looking at them---they're just a generated mess; you'll have much better time reading this doc instead---trust me.

Pieces not (yet) covered in this document are:
- emacs configuration at =.emacs.d/=;
- vim configuration at =.vimrc= and =.vim/=;
- awesome wm configuration at =.config/awesome/=;
- scripts at =bin/=;
- irssi config at =.irssi=;
  
* NixOS
I'm a [[http://nixos.org/][NixOS]] user. What's cool about it is that I can describe all my system configuration in one file (almost). I can execute a single command and have a system with the same software, system settings, etc.

An outline of configuration looks like this:

#+begin_src nix :tangle nixos-config.nix :noweb no-export :padline no
{ name, config, pkgs, lib, inputs, ... }:
let
  machine-config = lib.getAttr name {
    moxps = [
      <<machine-moxps>>
    ];
    mobook = [
      <<machine-mobook>>
    ];
  };
  # nur-no-pkgs = import (builtins.fetchTarball {
  #   url = "https://github.com/nix-community/NUR/archive/master.tar.gz";
  #   sha256 = "10dq8abmw30lrpwfg7yb1zn6fb5d2q94yhsvg6dwcknn46nilbxs";
  # }) {
  #     nurpkgs = pkgs;
  #     inherit pkgs;
  #     repoOverrides = {
  #       moritzschaefer = import /home/moritz/Projects/nur-packages;
  #     };
  #   };
in
{
  imports = [
    (import "${inputs.musnix}")
    {
      nixpkgs.config.allowUnfree = true;

      # The NixOS release to be compatible with for stateful data such as databases.
      system.stateVersion = "20.09";
    }

    <<nixos-section>>
  ] ++ machine-config;
}
#+end_src

This =<<nixos-section>>= is replaced by other parts of this doc.

** Flakes support
Enable experimental Flakes support.
#+name: nixos-section
#+begin_src nix
{
  nix = {
    package = pkgs.nixFlakes;
    extraOptions = ''
      experimental-features = nix-command flakes
    '';
  };
}
#+end_src

Make this repository flake-compatible:
#+begin_src nix :tangle flake.nix :noweb no-export :padline no
{
  description = "Moritz's NixOS/home-manager configuration";

  # edition = 201909;

  inputs = {
    nixpkgs = {
      type = "github";
      # owner = "rasendubi";
      # repo = "nixpkgs";
      # ref = "melpa-2020-04-27";
      owner = "moritzschaefer";
      # repo = "nixpkgs-channels";
      repo = "nixpkgs";
      rev = "246294708d4b4d0f7a9b63fb3b6866860ed78704";
      # ref = "nixpkgs-unstable";
      ref = "master";
    };
    nixos-hardware = {
      type = "github";
      owner = "NixOS";
      repo = "nixos-hardware";
      flake = false;
    };
    nur = {
      url = github:nix-community/NUR;
    };
    home-manager = {
      type = "github";
      owner = "rycee";
      repo = "home-manager";
      ref = "bqv-flakes";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    musnix = {
      type = "github";
      owner = "musnix";
      repo = "musnix";
      flake = false;
    };
  };

  outputs = { self, nixpkgs, nixpkgs-moritz, nixpkgs-unstable, nixos-hardware, home-manager, nur, musnix }@inputs:
    let
      system = "x86_64-linux";
      pkgs = import nixpkgs {
        inherit system;
        overlays = self.overlays;
        config = { allowUnfree = true; };
      };
    in {
      nixosConfigurations =
        let
          hosts = ["moxps" "mobook"];
          mkHost = name:
            nixpkgs.lib.nixosSystem {
              system = "x86_64-linux";
              modules = [
                { nixpkgs = { inherit pkgs;  }; }
                (import ./nixos-config.nix)
                { nixpkgs.overlays = [ nur.overlay ]; }
              ];
              specialArgs = { inherit name inputs; };
            };
        in nixpkgs.lib.genAttrs hosts mkHost;

      packages.x86_64-linux =
        let
          mergePackages = nixpkgs.lib.foldr nixpkgs.lib.mergeAttrs {};
        in
          mergePackages [
            <<flake-packages>>
          ];

      overlays = [
        (_self: _super: self.packages.x86_64-linux)
        <<flake-overlays>>
      ];

      homeManagerConfigurations.x86_64-linux =
        let
          hosts = ["MoritzSchaefer"];
          mkHost = hostname:
            home-manager.lib.homeManagerConfiguration {
              configuration = { ... }: {
                nixpkgs.config.allowUnfree = true;
                nixpkgs.overlays = self.overlays;
                imports = [(import ./.config/nixpkgs/home.nix)];
              };
              username = "moritz";
              homeDirectory = "/home/moritz";
              inherit system pkgs;
            };
        in nixpkgs.lib.genAttrs hosts mkHost;
    };
}
#+end_src
** Make nixpkgs available in NIX_PATH
#+name: nixos-section
#+begin_src nix
{
  nix.nixPath = [
    "nixpkgs=${inputs.nixpkgs}"
  ];
}
#+end_src
** Users
I'm the only user of the system:

#+name: nixos-section
#+begin_src nix
{
  users.extraUsers.moritz = {
    isNormalUser = true;
    uid = 1000;
    extraGroups = [ "users" "wheel" "input" ];
    initialPassword = "HelloWorld";
  };
}
#+end_src

=initialPassword= is used only first time when user is created. It must be changed as soon as possible with =passwd=.

** Home manager
Home-manager is used to manage my home directory and user applications (including my python installation).
I thought it wouldn't be required to install it (see flakes section), but it seems to be necessary anyways..

#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.home-manager
  ];
}
#+end_src
** Machines
#+name: Machines section
I currently have only one machine.
*** moxps
This is my Dell XPS 15.
#+name: machine-moxps
#+begin_src nix
{
  environment.systemPackages = with pkgs; let
    nvidia-offload = pkgs.writeShellScriptBin "nvidia-offload" ''
      export __NV_PRIME_RENDER_OFFLOAD=1
      export __NV_PRIME_RENDER_OFFLOAD_PROVIDER=NVIDIA-G0
      export __GLX_VENDOR_LIBRARY_NAME=nvidia
      export __VK_LAYER_NV_optimus=NVIDIA_only
      exec -a "$0" "$@"
    '';
  in [nvidia-offload];
  imports = [
    (import "${inputs.nixos-hardware}/dell/xps/15-9560/xps-common.nix")  # instead of default
    (import "${inputs.nixos-hardware}/common/cpu/intel")
    (import "${inputs.nixos-hardware}/common/pc/laptop")  # tlp.enable = true
    (import "${inputs.nixos-hardware}/common/pc/laptop/acpi_call.nix")  # tlp.enable = true
    (import "${inputs.nixos-hardware}/common/pc/laptop/ssd")
    inputs.nixpkgs.nixosModules.notDetected
  ];
  # accelerateion
  nixpkgs.config.packageOverrides = pkgs: {
    vaapiIntel = pkgs.vaapiIntel.override { enableHybridCodec = true; };
  };
  hardware.opengl = {
    enable = true;
    extraPackages = with pkgs; [
      intel-media-driver # LIBVA_DRIVER_NAME=iHD
      vaapiIntel         # LIBVA_DRIVER_NAME=i965 (older but works better for Firefox/Chromium)
      vaapiVdpau
      libvdpau-va-gl
    ];
  };

  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usb_storage" "sd_mod" "rtsx_pci_sdmmc" ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.kernelParams = [ "acpi_rev_override=5" "pcie_aspm=off" "nouveau.modeset=0" ];  # 5,6,1 doesn't seem to make a difference

  # from nixos-hardware
  boot.extraModulePackages = [ pkgs.linuxPackages.nvidia_x11 ];
  boot.blacklistedKernelModules = [ "bbswitch" "nouveau" ];
  services.xserver.videoDrivers = [ "intel" "nvidia" ];

  nix.maxJobs = lib.mkDefault 8;

  services.undervolt = {
    enable = true;
    coreOffset = -125;
    gpuOffset = -75;
  };
  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";


  # Nvidia stuff (https://discourse.nixos.org/t/how-to-use-nvidia-prime-offload-to-run-the-x-server-on-the-integrated-board/9091/13)
  boot.extraModprobeConfig = "options nvidia \"NVreg_DynamicPowerManagement=0x02\"\n";
  services.udev.extraRules = ''
    # Remove NVIDIA USB xHCI Host Controller devices, if present
    ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x0c0330", ATTR{remove}="1"

    # Remove NVIDIA USB Type-C UCSI devices, if present
    ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x0c8000", ATTR{remove}="1"

    # Remove NVIDIA Audio devices, if present
    ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x040300", ATTR{remove}="1"

    # Enable runtime PM for NVIDIA VGA/3D controller devices on driver bind
    ACTION=="bind", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x030000", TEST=="power/control", ATTR{power/control}="auto"
    ACTION=="bind", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x030200", TEST=="power/control", ATTR{power/control}="auto"

    # Disable runtime PM for NVIDIA VGA/3D controller devices on driver unbind
    ACTION=="unbind", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x030000", TEST=="power/control", ATTR{power/control}="on"
    ACTION=="unbind", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x030200", TEST=="power/control", ATTR{power/control}="on"
    '';
  hardware.nvidia = {
    # nvidiaPersistenced = true;
    powerManagement.enable = true;
    modesetting.enable = true;
    prime = {
      offload.enable = true;
      # Bus ID of the Intel GPU. You can find it using lspci, either under 3D or VGA
      intelBusId = "PCI:0:2:0";
      # Bus ID of the NVIDIA GPU. You can find it using lspci, either under 3D or VGA
      nvidiaBusId = "PCI:1:0:0";
    };
  };
  hardware.bumblebee.enable = false;
  hardware.bumblebee.pmMethod = "none";
}
#+end_src

LVM on LUKS setup for disk encryption.
#+name: machine-moxps
#+begin_src nix
{
  fileSystems."/" =
    { device = "/dev/disk/by-uuid/8f0a4152-e9f1-4315-8c34-0402ff7efff4";
      fsType = "btrfs";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/A227-1A0D";
      fsType = "vfat";
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/9eca5b06-730e-439f-997b-512a614ccce0"; }
    ];


  boot.initrd.luks.devices = {
    cryptkey.device = "/dev/disk/by-uuid/ccd19ab7-0e4d-4df4-8912-b87139de56af";
    cryptroot = {
      device="/dev/disk/by-uuid/88242cfe-48a1-44d2-a29b-b55e6f05d3d3";
      keyFile="/dev/mapper/cryptkey";
      };
    cryptswap = {
      device="/dev/disk/by-uuid/f6fa3573-44a9-41cc-bab7-da60d21e27b3";
      keyFile="/dev/mapper/cryptkey";
    };
  };
}
#+end_src

Clickpad and DPI:
#+name: machine-moxps
#+begin_src nix
{
  services.xserver.libinput = {
    enable = true;
    accelSpeed = "0.7";
  };
  # displayManager.lightdm.greeters.gtk.cursorTheme = {  # TODO if home manager cursor doesnt work
  #   name = "Vanilla-DMZ";
  #   package = pkgs.vanilla-dmz;
  #   size = 64;
  # };
}
#+end_src
*** mobook
This is my late 2013 MBP.
#+name: machine-mobook
#+begin_src nix
{
  imports = [
    (import "${inputs.nixos-hardware}/apple/macbook-pro")
    (import "${inputs.nixos-hardware}/common/pc/laptop/ssd")
    inputs.nixpkgs.modules.hardware.network.broadcom-43xx # <- using import vs not using import?
   #  <nixpkgs/nixos/modules/hardware/network/broadcom-43xx.nix> <- this is when using channels instead of flakes?
    inputs.nixpkgs.nixosModules.notDetected
  ];

  services.udev.extraRules =
    # Disable XHC1 wakeup signal to avoid resume getting triggered some time
    # after suspend. Reboot required for this to take effect.
    lib.optionalString
      (lib.versionAtLeast pkgs.kernelPackages.kernel.version "3.13")
      ''SUBSYSTEM=="pci", KERNEL=="0000:00:14.0", ATTR{power/wakeup}="disabled"'';
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
      
  # accelerateion
  # nixpkgs.config.packageOverrides = pkgs: {
  #   vaapiIntel = pkgs.vaapiIntel.override { enableHybridCodec = true; };
  # };
  # hardware.opengl = {
  #   enable = true;
  #   extraPackages = with pkgs; [
  #     intel-media-driver # LIBVA_DRIVER_NAME=iHD
  #     vaapiIntel         # LIBVA_DRIVER_NAME=i965 (older but works better for Firefox/Chromium)
  #     vaapiVdpau
  #     libvdpau-va-gl
  #   ];
  # };

  # boot.kernelModules = [ "kvm-intel" ];

  # powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
}
#+end_src

LVM on LUKS setup for disk encryption.
#+name: machine-mobook
#+begin_src nix
{
  fileSystems."/" =
    { device = "/dev/disk/by-uuid/8f0a4152-e9f1-4315-8c34-0402ff7efff4";
      fsType = "btrfs";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/A227-1A0D";
      fsType = "vfat";
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/9eca5b06-730e-439f-997b-512a614ccce0"; }
    ];


  boot.initrd.luks.devices = {
    cryptkey.device = "/dev/disk/by-uuid/ccd19ab7-0e4d-4df4-8912-b87139de56af";
    cryptroot = {
      device="/dev/disk/by-uuid/88242cfe-48a1-44d2-a29b-b55e6f05d3d3";
      keyFile="/dev/mapper/cryptkey";
      };
    cryptswap = {
      device="/dev/disk/by-uuid/f6fa3573-44a9-41cc-bab7-da60d21e27b3";
      keyFile="/dev/mapper/cryptkey";
    };
  };
}
#+end_src

Clickpad and DPI:
#+name: machine-mobook
#+begin_src nix
{
  services.xserver.libinput = {
    enable = true;
    accelSpeed = "0.7";
  };
  # displayManager.lightdm.greeters.gtk.cursorTheme = {  # TODO if home manager cursor doesnt work
  #   name = "Vanilla-DMZ";
  #   package = pkgs.vanilla-dmz;
  #   size = 64;
  # };
}
#+end_src
** Local packages
As a responsible NixOS user, I refuse to install software blindly with =sudo make install=. That's why I must write my own nix-expressions.
*** Custom Input font
I like the following settings more than defaults. I also need a custom four-style family because Emacs confuses regular/medium weight otherwise. Use link specified in ~requireFile~ to download the font.
#+DOWNLOADED: screenshot @ 2020-04-09 22:27:21
#+ATTR_ORG: :width 360
[[file:./images/20200409192721-screenshot.png]]

#+name: flake-packages
#+begin_src nix
{
  # note it's a new attribute and does not override old one
  input-mono = (pkgs.input-fonts.overrideAttrs (old: {
    src = pkgs.requireFile {
      name = "Input-Font.zip";
      url = "https://input.fontbureau.com/build/?fontSelection=fourStyleFamily&regular=InputMonoNarrow-Regular&italic=InputMonoNarrow-Italic&bold=InputMonoNarrow-Bold&boldItalic=InputMonoNarrow-BoldItalic&a=0&g=0&i=topserif&l=serifs_round&zero=0&asterisk=height&braces=straight&preset=default&line-height=1.2&accept=I+do&email=";
      sha256 = "888bbeafe4aa6e708f5c37b42fdbab526bc1d125de5192475e7a4bb3040fc45a";
    };
    outputHash = "1w2i660dg04nyc6fc6r6sd3pw53h8dh8yx4iy6ccpii9gwjl9val";
  }));
}
#+end_src
** Bluetooth
I have a bluetooth headset, so this enables bluetooth audio in NixOS.

#+name: nixos-section
#+begin_src nix
{
  hardware.bluetooth.enable = true;
  hardware.bluetooth.powerOnBoot = false;
  services.blueman.enable = true;
  hardware.bluetooth.config.General.Enable = "Source,Sink,Media,Socket";
  hardware.pulseaudio = {
    enable = true;

    # NixOS allows either a lightweight build (default) or full build
    # of PulseAudio to be installed.  Only the full build has
    # Bluetooth support, so it must be selected here.

    extraModules = [ pkgs.pulseaudio-modules-bt ];
    # package = pkgs.pulseaudioFull;
  };
}
#+end_src
** NTFS
Install ntfs-3g to mount ntfs volumes in read-write mode.

#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.ntfs3g
  ];
}
#+end_src
** Network mounts
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.sshfs
  ];
  fileSystems."/mnt/cclab_nas" = {
    device = "//nas22.ethz.ch/biol_imhs_ciaudo";
    fsType = "cifs";
    options = [ "credentials=/home/moritz/.secret/cclab_nas.credentials" "workgroup=d.ethz.ch" "uid=moritz" "gid=users" "noauto"];
  };

# https://releases.nixos.org/nix-dev/2016-September/021763.html  TODO not working :/
  fileSystems."/mnt/cclab_server" = let
    sshAsUser = user: 
      pkgs.writeScript "ssh_as_${user}" ''
        exec ${pkgs.sudo}/bin/sudo -i -u ${user} \
          ${pkgs.openssh}/bin/ssh $@
      '';
  in {
    # device = "sshfs#schamori@mhs-cclab-srv001.ethz.ch:/";
    fsType = "fuse";
    device = "${pkgs.sshfsFuse}/bin/sshfs#schamori@mhs-cclab-srv001.ethz.ch:/";
    options = [
            "noauto" "_netdev" "allow_other" "x-gvfs-hide" #"reconnect"  # "x-systemd.automount" 
            "ServerAliveInterval=5" "ServerAliveCountMax=1"
            "uid=30925" "gid=100" "umask=0"   # TODO comment if fails
            "ssh_command=${sshAsUser "moritz"}"
          ];
  };
  
  # https://soultrace.net/mount-network-share-after-boot/ <- more beautiful
  networking.networkmanager.dispatcherScripts = [
    {
      source = pkgs.writeText "mountHook" ''
        if [ "$2" != "vpn-up" ]; then
            logger "exit: event $2 != vpn-up"
            exit
        fi
        mount /mnt/cclab_nas
        # mount /mnt/cclab_server
        logger "Mounted cclab_nas"
      '';
      type = "basic";
    }
    {
      source = pkgs.writeText "umountHook" ''
        if [ "$2" != "vpn-pre-down" ]; then
            logger "exit: event $2 != vpn-pre-down"
            exit
        fi
        umount -a -l -t cifs
        umount /mnt/cclab_server
        logger "Unmounted cclab_nas"
      '';
      type = "pre-down";
    }
  ];
  
  systemd.services.suspend-disconnect = {
    description = "Disconnect VPN before suspend";
    wantedBy = [ "systemd-suspend.service" ];
    before = [ "systemd-suspend.service" ];
    script = ''
      /run/current-system/sw/bin/nmcli con down id VPN\ ETHZ 2> /tmp/suspend
    '';
    serviceConfig.Type = "oneshot";
  };
  # systemd.services.tun-connect = {
  #   wants = [ "sys-devices-virtual-net-tun0.device" ];
  #   after = [ "sys-devices-virtual-net-tun0.device" ];
  #   requires = [];
  #   services.systemd-logind.environment.SYSTEMD_LOG_LEVEL
  #   requires
  #   script = ''
  #   echo "cte" > /tmp/vpn
  #   mount /mnt/cclab_nas
  #   '';
  # };
  # powerManagement.powerDownCommands = "\"fusermount -u /home/moritz/sshfs \"\n\"echo ieie > /tmp/testt\"";  # doesn't work (at least not without reboot..)
}
#+end_src

** Updates
#+name: nixos-section
#+begin_src nix
{
  system.autoUpgrade.enable = true;
}
#+end_src

** Hibernate on battery low
#+name: nixos-section
#+begin_src nix
{
  systemd.timers.hibernate-on-low-battery = {
    wantedBy = [ "multi-user.target" ];
    timerConfig = {
      OnUnitActiveSec = "120";
      OnBootSec= "120";
    };
  };
  systemd.services.hibernate-on-low-battery =
    let
      battery-level-sufficient = pkgs.writeShellScriptBin
        "battery-level-sufficient" ''
        test "$(cat /sys/class/power_supply/BAT0/status)" != Discharging \
          || test "$(cat /sys/class/power_supply/BAT0/capacity)" -ge 5
      '';
    in
      {
        serviceConfig = { Type = "oneshot"; };
        onFailure = [ "hibernate.target" ];
        script = "${battery-level-sufficient}/bin/battery-level-sufficient";
      };
}
#+end_src

** Garbage collection/Cleaning
#+name: nixos-section
#+begin_src nix
{
  nix.gc.automatic = true;
  nix.gc.options = "--delete-older-than 12d";
}
#+end_src


* Services
** NetworkManager
#+name: nixos-section
#+begin_src nix
{
  networking = {
    hostName = name;

    networkmanager.enable = true;

    # disable wpa_supplicant
    wireless.enable = false;
  };

  users.extraUsers.moritz.extraGroups = [ "networkmanager" ];

  environment.systemPackages = [
    pkgs.networkmanagerapplet
  ];
}
#+end_src
** Avahi
#+name: nixos-section
#+begin_src nix
{
  services.avahi = {
    enable = true;
    interfaces = [];
    openFirewall = false;
  };
}
#+end_src
** PulseAudio&Audio
Use pulseaudio (multiple sound sinks, skype calls). =pavucontrol= is PulseAudio Volume Control---a nice utility for controlling pulseaudio settings.

Also, Pulseaudio is a requirement for Firefox Quantum.
#+name: nixos-section
#+begin_src nix
{
  hardware.pulseaudio = {
    enable = true;
    support32Bit = true;
    zeroconf.discovery.enable = true;
    systemWide = false;
    package = pkgs.pulseaudioFull; # .override { jackaudioSupport = true; };  # need "full" for bluetooth
  };

  environment.systemPackages = with pkgs; [ pavucontrol libjack2 jack2 qjackctl jack2Full jack_capture ];

  # services.jack = {
  #   jackd.enable = true;
  #   # support ALSA only programs via ALSA JACK PCM plugin
  #   alsa.enable = false;
  #   # support ALSA only programs via loopback device (supports programs like Steam)
  #   loopback = {
  #     enable = true;
  #     # buffering parameters for dmix device to work with ALSA only semi-professional sound programs
  #     #dmixConfig = ''
  #     #  period_size 2048
  #     #'';
  #   };
  # };
  # boot.kernelModules = [ "snd-seq" "snd-rawmidi" ];

  users.extraUsers.moritz.extraGroups = [ "audio" ];  # "jackaudio" 

  # from https://github.com/JeffreyBenjaminBrown/nixos-experiments/blob/6c4be545e2ec18c6d9b32ec9b66d37c59d9ebc1f/audio.nix
  security.sudo.extraConfig = ''
    moritz  ALL=(ALL) NOPASSWD: ${pkgs.systemd}/bin/systemctl
    '';
  musnix = {
    enable = true;
    alsaSeq.enable = false;

    # Find this value with `lspci | grep -i audio` (per the musnix readme).
    # PITFALL: This is the id of the built-in soundcard.
    #   When I start using the external one, change it.
    soundcardPciId = "00:1f.3";

    # If I build with either of these, I get a PREEMPT error, much like
    #   https://github.com/musnix/musnix/issues/100
    # kernel.realtime = true;
    # kernel.optimize = true;

    # das_watchdog.enable = true;
      # I don't think this does anything without the realtime kernel.

    # magic to me
    rtirq = {
      # highList = "snd_hrtimer";
      resetAll = 1;
      prioLow = 0;
      enable = true;
      nameList = "rtc0 snd";
    };
  };
    

}
#+end_src
** Printing
https://nixos.wiki/wiki/Printing

#+name: nixos-section
#+begin_src nix
{
  services.printing.enable = true;
  services.printing.drivers = with pkgs; [
    gutenprint
    gutenprintBin
    samsungUnifiedLinuxDriver
    splix
  ];
  services.system-config-printer.enable = true;
}
#+end_src

** Locate
Update [[https://linux.die.net/man/1/locate][locate]] database daily.
#+name: nixos-section
#+begin_src nix
{
  services.locate = {
    enable = true;
    localuser = "moritz";
  };
}
#+end_src
** SSH
#+name: nixos-section
#+begin_src nix
{
  services.openssh = {
    enable = false;
    passwordAuthentication = false;
  };
}
#+end_src
*** Mosh
[[https://mosh.mit.edu/][Mosh (mobile shell)]] is a cool addition to ssh.
#+name: nixos-section
#+begin_src nix
{
  programs.mosh.enable = true;
}
#+end_src
** dnsmasq
Use [[http://www.thekelleys.org.uk/dnsmasq/doc.html][dnsmasq]] as a DNS cache.

#+name: nixos-section
#+begin_src nix
{
  services.dnsmasq = {
    enable = true;

    # These are used in addition to resolv.conf
    servers = [
      "8.8.8.8"
      "8.8.4.4"
    ];

    extraConfig = ''
      listen-address=127.0.0.1
      cache-size=1000

      no-negcache
    '';
  };
}
#+end_src
** Syncthing
I use Syncthing to sync my org-mode files to my phone.

#+name: nixos-section
#+begin_src nix
{
  services.syncthing = {
    enable = true;
    user = "moritz";
    dataDir = "/home/moritz/.config/syncthing";
    configDir = "/home/moritz/.config/syncthing";
    openDefaultPorts = true;
  };
}
#+end_src
** Firewall
Enable firewall. This blocks all ports (for ingress traffic) and pings.

#+name: nixos-section
#+begin_src nix
{
  networking.firewall = {
    enable = true;
    allowPing = false;

    connectionTrackingModules = [];
    autoLoadConntrackHelpers = false;
  };
}
#+end_src
** Virtualization/Development
#+name: nixos-section
#+begin_src nix
{
  virtualisation.docker.enable = true;
  environment.systemPackages = [
    pkgs.docker-compose
    pkgs.kvm
    pkgs.qemu
  ];

  users.users.moritz.extraGroups = ["libvirtd"];  # required for qemu I think 
}
#+end_src
** Backup
I use borg for backups.

#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [ pkgs.borgbackup ];
}
#+end_src
** ADB
I need to access my Android device.
#+name: nixos-section
#+begin_src nix
{
  services.udev.packages = [ pkgs.android-udev-rules ];
  programs.adb.enable = true;
  users.users.moritz.extraGroups = ["adbusers"];
}
#+end_src
** fwupd
fwupd is a service that allows applications to update firmware.
#+name: nixos-section
#+begin_src nix
{
  services.fwupd.enable = true;
}
#+end_src
** lorri + direnv
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.direnv
  ];
  programs.fish.shellInit = ''
    eval (direnv hook fish)
  '';

  services.lorri.enable = true;
}
#+end_src
** Automounting
Automatic USB stick mounting
#+name: nixos-section
#+begin_src nix
{
  # services.udisks2.enable = true;
  services.devmon.enable = true;
}
#+end_src
** Logind
#+name: nixos-section
#+begin_src nix
{
  services.logind.extraConfig = ''
    HandlePowerKey=suspend
  '';
}
#+end_src

* Mail setup
** Mbsync
I use mbsync to sync my accounts and make them available offline.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.isync
  ];
}
#+end_src

Config file is =.mbsyncrc=.
#+begin_src conf :tangle .mbsyncrc :noweb yes
  MaildirStore local
  Path ~/Mail/
  Inbox ~/Mail/INBOX
  SubFolders Verbatim


  <<mbsync-gmail(name="gmail", email="mollitz@gmail.com", path="Personal")>>
#+end_src

I have multiple Gmail accounts, so here is a general template.
#+name: mbsync-gmail
#+begin_src emacs-lisp :var name="" :var email="" :var path="" :noweb no
(defmacro rasen/interpolate-string (text)
  "Expand text like \"Hello <<name>>\" to (format \"Hello %s\" name)."
  (let ((pattern "<<\\(.*?\\)>>"))
    ;; The regexp matches anything between delimiters, non-greedily
    (with-temp-buffer
      (save-excursion (insert text))
      (let ((matches '()))
        (while (re-search-forward pattern nil t)
          (push (match-string 1) matches)
          (replace-match "%s" t t))
`(format ,(buffer-string) ,@(reverse (mapcar 'read matches)))))))
(rasen/interpolate-string "
IMAPAccount <<name>>
Host imap.gmail.com
User <<email>>
PassCmd \"pass imap.gmail.com/<<email>>\"
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore <<name>>-remote
Account <<name>>

Channel sync-<<name>>-all
Master :<<name>>-remote:\"[Gmail]/All Mail\"
Slave :local:<<path>>/all
Create Both
SyncState *

Channel sync-<<name>>-spam
Master :<<name>>-remote:\"[Gmail]/Spam\"
Slave :local:<<path>>/spam
Create Both
SyncState *

Channel sync-<<name>>-sent
Master :<<name>>-remote:\"[Gmail]/Sent Mail\"
Slave :local:<<path>>/sent
Create Both
SyncState *

Group sync-<<name>>
Channel sync-<<name>>-all
Channel sync-<<name>>-spam
Channel sync-<<name>>-sent
")
#+end_src
** msmtp
Msmtp is used to send mail.

#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.msmtp
  ];
}
#+end_src

Config file is =.msmtprc=.
#+begin_src conf :tangle .msmtprc :noweb yes
defaults
auth on
tls on
tls_starttls off
tls_trust_file /etc/ssl/certs/ca-certificates.crt
logfile ~/.msmtp.log

<<msmtp-gmail(name="gmail", email="mollitz@gmail.com")>>
#+end_src

Again, general template for gmail accounts.
#+name: msmtp-gmail
#+begin_src emacs-lisp :var name="" :var email="" :noweb no
(rasen/interpolate-string "
# <<name>>
account <<name>>
host smtp.gmail.com
port 465
from <<email>>
user <<email>>
passwordeval \"pass imap.gmail.com/<<email>>\"
")
#+end_src
** notmuch
Notmuch is used for tagging.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.notmuch
  ];
}
#+end_src

Config file is =.notmuch-config=.
#+begin_src conf :tangle .notmuch-config
[user]
name=Moritz Schaefer
primary_email=mollitz@gmail.com
other_email=ashmalko@cybervisiontech.com,ashmalko@kaaiot.io,ashmalko@doctoright.org,me@egoless.tech

[database]
path=/home/moritz/Mail

[new]
tags=inbox;
ignore=.mbsyncstate;.mbsyncstate.lock;.mbsyncstate.new;.mbsyncstate.journal;.uidvalidity;dovecot-uidlist;dovecot-keywords;dovecot.index;dovecot.index.log;dovecot.index.log.2;dovecot.index.cache;/^archive/

[search]
exclude_tags=deleted;spam;muted;

[crypto]
gpg_path=gpg2
#+end_src
* Environment
** General
I definitely use X server:
#+name: nixos-section
#+begin_src nix
{
  services.xserver.enable = true;
}
#+end_src

Use English as my only supported locale:
#+name: nixos-section
#+begin_src nix
{
  i18n.supportedLocales = [ "en_US.UTF-8/UTF-8" ];
}
#+end_src

Setup timezone:
#+name: nixos-section
#+begin_src nix
{
  time.timeZone = "Europe/Berlin";
}
#+end_src
** Login manager / display manager
#+name: nixos-section
#+begin_src nix
{
  services.xserver.displayManager = {
    autoLogin = {
      user = "moritz";
      enable = true;
    };
    lightdm = {
      enable = true;
    };
  };
}
#+end_src
** Window manager
I use EXWM:

#+name: nixos-section
#+begin_src nix
{
  services.xserver.windowManager = {
    exwm = {
      enable = true;
      extraPackages = epkgs: with epkgs; [ emacsql-sqlite pkgs.imagemagick ];  # unfortunately, adding zmq and jupyter here, didn't work so I had to install them manually (i.e. compiling emacs-zmq)
      enableDefaultConfig = false;  # todo disable and enable loadScript
      # careful, 'loadScript option' was merged from Vizaxo into my personal nixpkgs repo.
      loadScript = ''
        (require 'exwm)
        ;; most of it is now in .spacemacs.d/lisp/exwm.el
        ;; (require 'exwm-systemtray)
        (require 'exwm-randr)
        ;; (setq exwm-randr-workspace-monitor-plist '(0 "eDP1" 1 "HDMI1" 2 "DP2" 3 "eDP1" 4 "HDMI1" 5 "DP2"))
        ;; (setq exwm-randr-workspace-monitor-plist '(0 "eDP1" 1 "eDP1" 2 "HDMI1" 3 "eDP1" 4 "eDP1" 5 "eDP1"))
        ;; (exwm-randr-enable)
        ;; (exwm-systemtray-enable)
        (exwm-enable)
      '';
    };
    stumpwm.enable = true;
  };
  services.xserver.displayManager.defaultSession = "none+exwm";  # Firefox works more fluently with plasma5+exwm instead of "none+exwm". or does it??
  services.xserver.desktopManager = {
    xterm.enable = false;
    plasma5.enable = true;
    xfce = {
      enable = true;
      noDesktop= true;
      enableXfwm = true;
    };
  };
}
#+end_src


These packages are used by my awesome wm setup:
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.wmname
    pkgs.xclip
    pkgs.escrotum
  ];
}
#+end_src
** Notification Manager
https://github.com/bsag/nixos-config/blob/330e34c40aba37664bbc20550bf4dd427f0e4788/configuration.nix
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = with pkgs; [
    dunst
  ];
  systemd.user.services."dunst" = {
    enable = true;
    description = "";
    wantedBy = [ "default.target" ];
    serviceConfig.Restart = "always";
    serviceConfig.RestartSec = 2;
    serviceConfig.ExecStart = "${pkgs.dunst}/bin/dunst";
  };
}
#+end_src

** Keyboard
*** Layouts
I use English and Ukrainian layouts. I also use Russian symbols, but they are on the third level.
#+name: nixos-section
#+begin_src nix
{
  services.xserver.layout = "de,de,us";
  services.xserver.xkbVariant = "bone,,";
  services.xserver.xkbOptions= "terminate:ctrl_alt_bksp";

  # Use same config for linux console
  console.useXkbConfig = true;
}
#+end_src

# TODO do I need this?
Map left Caps Lock to Ctrl, and left Ctrl to switch between layout. (Shift-Ctrl triggers Caps Lock function.)

I toggle between them with either Caps Lock, or Menu key---I have two different keyboards, and one doesn't have Menu when Caps Lock is too far on the second. I never use Caps Lock--the feature, so it's nice to have Caps LED indicate alternate layouts.
#+name: nixos-section-unused
#+begin_src nix
{
  services.xserver.xkbOptions = "grp:lctrl_toggle,grp_led:caps,ctrl:nocaps";
}
#+end_src
*** Speed
#+name: nixos-section
#+begin_src nix
{
  services.xserver.autoRepeatDelay = 180;
  services.xserver.autoRepeatInterval = 50;

  # Use same config for linux console
  console.useXkbConfig = true;
}
#+end_src
*** Layout indicator
# I use built-in awesome layout indicator. See [[.config/awesome/rc.lu]] for more details.
** Redshift
Redshift adjusts the color temperature of the screen according to the position of the sun.

Blue light blocks [[https://en.wikipedia.org/wiki/Melatonin][melatonin]] (sleep harmone) secretion, so you feel less sleepy when you stare at computer screen.
Redshift blocks some blue light (making screen more red), which should improve melatonin secretion and restore sleepiness (which is a good thing).

#+name: nixos-section
#+begin_src nix
{
  services.redshift = {
    enable = true;
  };
  location.provider = "geoclue2";
}
#+end_src
** Screen brightness
=xbacklight= stopped working recently. =acpilight= is a drop-in replacement.
#+name: nixos-section
#+begin_src nix
{
  hardware.acpilight.enable = true;
  environment.systemPackages = [
    pkgs.acpilight
    pkgs.brightnessctl
  ];
  users.extraUsers.moritz.extraGroups = [ "video" ];
}
#+end_src
* Look and Feel
** Fonts
I'm not a font guru, so I just stuffed a bunch of random fonts in here.

#+name: nixos-section
#+begin_src nix
{
  fonts = {
    # fontDir.enable = true; # 21.03 rename
    enableFontDir = true;
    enableGhostscriptFonts = false;

    fonts = with pkgs; [
      corefonts
      inconsolata
      dejavu_fonts
      source-code-pro
      ubuntu_font_family
      unifont

      # Used by Emacs
      input-mono
      libertine
    ];
  };
}
#+end_src
** Hi-DPI
These are for moxps-only.

#+begin_src fundamental :tangle .Xresources
Xft.dpi: 120
Xcursor.size: 32
#+end_src

#+name: machine-moxps
#+begin_src nix
{
  console.packages = [
    pkgs.terminus_font
  ];
  console.font = "ter-132n";
}
#+end_src

#+name: machine-moxps
#+begin_src nix
{
  services.xserver.dpi = 120;
}
#+end_src
* Applications
Here go applications (almost) every normal user needs.
** SSH
#+name: nixos-section
#+begin_src nix
{
  programs.ssh = {
    startAgent = true;
  };
  programs.gnupg.agent = {
    enable = true;
    enableSSHSupport = false;
    pinentryFlavor = "qt";
  };

  # is it no longer needed?
  
  # systemd.user.sockets.gpg-agent-ssh = {
  #   wantedBy = [ "sockets.target" ];
  #   listenStreams = [ "%t/gnupg/S.gpg-agent.ssh" ];
  #   socketConfig = {
  #     FileDescriptorName = "ssh";
  #     Service = "gpg-agent.service";
  #     SocketMode = "0600";
  #     DirectoryMode = "0700";
  #   };
  # };

  services.pcscd.enable = true;
}
#+end_src
** password-store
Install [[https://www.passwordstore.org/][password-store]] along with [[https://github.com/tadfisher/pass-otp][one-time password extension]].
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = with pkgs; [
    (pass.withExtensions (exts: [ exts.pass-otp ]))
    pinentry-curses
    pinentry-qt
    pinentry-emacs
  ];
  # services.keepassx.enable = true;
}
#+end_src
** KDE apps
I don't use full KDE but some apps are definitely nice.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.gwenview
    pkgs.dolphin
    pkgs.kdeFrameworks.kfilemetadata
    pkgs.filelight
    pkgs.shared_mime_info
  ];
}
#+end_src

KDE apps might have issues with mime types without this:
#+name: nixos-section
#+begin_src nix
{
  environment.pathsToLink = [ "/share" ];
}
#+end_src
** Browsers
*** Google Chrome
Google Chrome used to be my default browser and I still use it from time to time.

#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.google-chrome
  ];
}
#+end_src
*** Firefox
I use Firefox Quantum as my default browser now.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    (pkgs.firefox.override { extraNativeMessagingHosts = [ pkgs.passff-host ]; })
  ];
}
#+end_src
*** Qutebrowser
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.qutebrowser
  ];
  environment.variables.QUTE_BIB_FILEPATH = "/home/moritz/wiki/papers/references.bib";
}
#+end_src
** Zathura
[[https://pwmt.org/projects/zathura/][Zathura]] is a cool document viewer with Vim-like bindings.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.zathura
  ];
}
#+end_src

Enable incremental search (Zathura's config goes to =~/.config/zathura/zathurarc=).
#+begin_src fundamental :tangle .config/zathura/zathurarc :padline no
set incremental-search true
#+end_src

These are my rebinding for Workman layout (swap j/k):
#+begin_src fudamental :tangle .config/zathura/zathurarc :padline no
map j scroll up
map k scroll down
#+end_src
** Screen locking
*** Slock
[[http://tools.suckless.org/slock/][Slock]] is a simple X display locker and should probably not crash as xscreensaver does.

Slock tries to disable OOM killer (so the locker is not killed when memory is low) and this requires a suid flag for executable. Otherwise, you get the following message:
#+begin_src fundamental
slock: unable to disable OOM killer. Make sure to suid or sgid slock.
#+end_src

#+name: nixos-section
#+begin_src nix
{
  programs.slock.enable = true;
}
#+end_src
*** xss-lock
[[https://bitbucket.org/raymonad/xss-lock][xss-lock]] is a small utility to plug a screen locker into screen saver extension for X. This automatically activates selected screensaver after a period of user inactivity, or when system goes to sleep.

#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.xss-lock
  ];
}
#+end_src
** Science
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = with pkgs; [
    igv
  ];
}
#+end_src
** Spotify
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages =
    let wrapper = pkgs.writeScriptBin "spotify-highres" ''
      #!${pkgs.stdenv.shell}
      exec ${pkgs.spotify}/bin/spotify --force-device-scale-factor=2
      '';
  in
     [ pkgs.spotify wrapper ];
}
#+end_src
** TOR
#+name: nixos-section
#+begin_src nix
{
  services.tor.enable = false;
  services.tor.client.enable = false;
}
#+end_src

** Steam
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [ pkgs.steam ];
  hardware.opengl.driSupport32Bit = true;
  hardware.opengl.extraPackages32 = with pkgs.pkgsi686Linux; [ libva vaapiIntel];
  hardware.pulseaudio.support32Bit = true;
}
#+end_src
** Other applications
Don't require additional setup.

#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = with pkgs; [
    gnome3.cheese
    gnome3.gnome-screenshot
    pandoc   # TODO make a latex section
    # haskellPackages.pandoc-crossref  # broken...
    haskellPackages.pandoc-citeproc
    # texlive.combined.scheme-full
    sparkleshare
    gnome3.gpaste
    autorandr
    
    # kdenlive  # fails in current unstable
    audacity
    google-play-music-desktop-player
    tdesktop # Telegram
    signal-cli # Signal
    signal-desktop # Signal
    zoom-us
    libreoffice
    wineWowPackages.stable
    # winetricks  # requires p7zip (which is unsafe...)
    gimp-with-plugins

    mplayer
    smplayer

    # Used by naga setup
    xdotool
  ];
}
#+end_src
** Default applications

#+name: nixos-section
#+begin_src nix
{
  environment.variables.XDG_CONFIG_DIRS = [ "/etc/xdg" ]; # we should probably have this in NixOS by default
  environment.etc."xdg/mimeapps.list" = {
    text = ''
      [Default Applications]
      image/png=inkscape.desktop;
      image/svg+xml=inkscape.desktop;
    '';
  };
}
#+end_src


* Development
** Editors
I'm a seasoned Vim user, but I've switched to emacs.
#+name: nixos-section
#+begin_src nix
{
  environment.variables.EDITOR = "vim";
  environment.systemPackages = [
    (pkgs.vim_configurable.override { python3 = true; })
    pkgs.neovim
  ];
}
#+end_src

TODO: I think this one is not called/used since I am using exwm
Start emacs as a daemon:
#+name: nixos-section-unused
#+begin_src nix
{
  services.emacs =
    let emacsConfig = import .config/nixpkgs/emacs.nix { inherit pkgs; };
    in {
      enable = false;  # TODO
      defaultEditor = true;
      package = emacsConfig.finalEmacs;
    };
  environment.systemPackages = [
    pkgs.ripgrep
    (pkgs.aspellWithDicts (dicts: with dicts; [en en-computers en-science ru uk]))

    # pkgs.rustup
    # pkgs.rustracer

    # pkgs.clojure
    # pkgs.leiningen
  ];
  # environment.variables.RUST_SRC_PATH = "${pkgs.rustPlatform.rustcSrc}";
}
#+end_src
** Conda
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.conda
  ];
}
#+end_src

#+name: flake-overlays
#+begin_src nix
  (_self: _super: { conda = _super.conda.override { extraPkgs = [ _super.which ]; }; })  # this is an overlay
#+end_src

** rxvt-unicode
I use urxvt as my terminal emulator:
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.rxvt_unicode
  ];
}
#+end_src

Urxvt gets its setting from =.Xresources= file. If you ever want to reload it on-the-fly, type the following (or press =C-c C-c= if you're reading this document in emacs now):
#+begin_src sh
xrdb ~/.Xresources
#+end_src
*** General setup
See [[http://pod.tst.eu/http://cvs.schmorp.de/rxvt-unicode/doc/rxvt.1.pod][rxvt-unicode documentation]] for the full reference.

#+begin_src conf-xdefaults :tangle .Xresources :padline no
urxvt.loginShell:         true
urxvt.saveLines:         65535
urxvt.urgentOnBell:       true

urxvt.scrollBar:         false
urxvt.scrollTtyOutput:   false
urxvt.scrollTtyKeypress:  true
urxvt.secondaryScroll:    true
#+end_src

The next piece disables annoying message when pressing Ctrl+Shift:
#+begin_src conf-xdefaults :tangle .Xresources
urxvt.iso14755: False
#+end_src

+Copy-paste with Ctrl+Shift+C, Ctrl+Shift+V:+

From [[https://github.com/muennich/urxvt-perls][urxvt-perls]]:
#+begin_quote
Since version 9.20 rxvt-unicode natively supports copying to and pasting from the CLIPBOARD buffer with the Ctrl-Meta-c and Ctrl-Meta-v key bindings. The clipboard.autocopy setting is provided by the selection_to_clipboard extension shipped with rxvt-unicode.
#+end_quote

That means, I don't need perl extensions at all.
*** Font
I use Terminus font.

#+name: nixos-section
#+begin_src nix
{
  fonts = {
    fonts = with pkgs; [
      powerline-fonts
      terminus_font

    ];
  };
}
#+end_src

#+begin_src conf-xdefaults :tangle .Xresources
URxvt.font: -*-terminus-medium-r-normal-*-32-*-*-*-*-*-iso10646-1
#+end_src

# I used this line before:
# URxvt.font: xft:Terminus:normal:size=12
*** Color theme
I like Molokai color theme.

#+begin_src conf-xdefaults :tangle .Xresources
URxvt*background: #101010
URxvt*foreground: #d0d0d0
URxvt*color0:     #101010
URxvt*color1:     #960050
URxvt*color2:     #66aa11
URxvt*color3:     #c47f2c
URxvt*color4:     #30309b
URxvt*color5:     #7e40a5
URxvt*color6:     #3579a8
URxvt*color7:     #9999aa
URxvt*color8:     #303030
URxvt*color9:     #ff0090
URxvt*color10:    #80ff00
URxvt*color11:    #ffba68
URxvt*color12:    #5f5fee
URxvt*color13:    #bb88dd
URxvt*color14:    #4eb4fa
URxvt*color15:    #d0d0d0
#+end_src
** fish
[[https://fishshell.com/][fish]] is a cool shell, I use it as my default for day-to-day work.

#+name: nixos-section
#+begin_src nix
{
  programs.fish.enable = true;
  users.defaultUserShell = pkgs.fish;
}
#+end_src
*** Vi key bindings
Tangle to =.config/fish/functions/fish_user_key_bindings.fish=.

#+begin_src fish :tangle .config/fish/functions/fish_user_key_bindings.fish
function fish_user_key_bindings
    fish_vi_key_bindings

    bind -s j up-or-search
    bind -s k down-or-search
    bind -s -M visual j up-line
    bind -s -M visual k down-line

    bind -s '.' repeat-jump
end
#+end_src
** git
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.gitFull
    pkgs.gitg
  ];
}
#+end_src

Basic info: my name, email, ui, editor, [[https://git-scm.com/blog/2010/03/08/rerere.html][rerere]].

#+begin_src gitconfig :tangle .gitconfig :padline no
[user]
    name = Moritz Schaefer
    email = mollitz@gmail.com

[sendemail]
    smtpencryption = ssl
    smtpserver = smtp.gmail.com
    smtpuser = mollitz@gmail.com
    smtpserverport = 465

[color]
    ui = true

[core]
    editor = vim

[push]
    default = simple

[pull]
    rebase = true

[rebase]
    autostash = true

[rerere]
    enabled = true

[advice]
    detachedHead = false
#+end_src

Configure signing with [[https://www.gnupg.org/][gpg]].
#+begin_src gitconfig :tangle .gitconfig
[user]
    signingkey = EB3066C3

[gpg]
    program = gpg2

[push]
    gpgSign = if-asked
#+end_src

I have *LOTS* of aliases:

#+begin_src gitconfig :tangle .gitconfig
[alias]
    cl  = clone
    gh-cl = gh-clone
    cr  = cr-fix
    p   = push
    pl  = pull
    f   = fetch
    fa  = fetch --all
    a   = add
    ap  = add -p
    d   = diff
    dl  = diff HEAD~ HEAD
    ds  = diff --staged
    l   = log --show-signature
    l1  = log -1
    lp  = log -p
    c   = commit
    ca  = commit --amend
    co  = checkout
    cb  = checkout -b
    cm  = checkout origin/master
    de  = checkout --detach
    fco = fetch-checkout
    br  = branch
    s   = status
    re  = reset --hard
    r   = rebase
    rc  = rebase --continue
    ri  = rebase -i
    m   = merge
    t   = tag
    su  = submodule update --init --recursive
    bi  = bisect
#+end_src

Always push to github with ssh keys instead of login/password.

#+begin_src gitconfig :tangle .gitconfig
[url "git@github.com:"]
    pushInsteadOf = https://github.com/
#+end_src
** tmux
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.tmux
    pkgs.python37Packages.powerline
  ];
}
#+end_src

Use =C-a= as a prefix.
#+begin_src conf-space :tangle .tmux.conf :padline no
set -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix
#+end_src

Move windows (tabs) around. Stealed from [[https://til.hashrocket.com/posts/6vz1uo5bxv-move-window-tab-in-tmux][here]].

#+begin_src conf-space :tangle .tmux.conf
bind-key S-left swap-window -t -1
bind-key S-right swap-window -t +1
#+end_src


/TODO describe other settings/
#+begin_src conf-space :tangle .tmux.conf
# To make vim work properly
set -g default-terminal "screen-256color"

set -g status-keys vi
setw -g mode-keys vi

set -g history-limit 10000

# Start numbering from 1
set -g base-index 1

# Allows for faster key repetition
set -s escape-time 0

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind-key s split-window
bind-key v split-window -h

bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

set-window-option -g automatic-rename
#+end_src
** R
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = let R-with-my-packages = pkgs.rWrapper.override{ packages = with pkgs.rPackages; [ ggplot2 eulerr gridExtra INSPEcT XVector S4Vectors]; };
  in [ R-with-my-packages ];
}
#+end_src
** Python
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = let python = (with pkgs; python3.withPackages (python-packages: with python-packages; [
    python3
    pandas
    openpyxl
    biopython
    scikitlearn
    matplotlib
    pyproj
    seaborn
    requests
    ipdb
    isort
    tox
    tqdm
    xlrd
    pyyaml
    matplotlib-venn
    networkx
    statsmodels
    up-set-plot
    # jedi
    # json-rpc
    # service-factory

    fritzconnection
    # jupyter
    # jupyter_core
    powerline
    adjust-text
    # up-set-plot
    # moritzsphd
    tabulate
    # swifter
    gffutils
    pyensembl
    pybedtools
    pybigwig
    xdg
    epc
    importmagic
    jupyterlab
    jupyter_console
    ipykernel
    pyperclip
    scikit-plot
    scikit-bio
    powerline
    python-language-server
    pyls-isort
    pyls-mypy
    # ptvsd
  ])); in with pkgs.python3Packages; [
    python  # let is stronger than with, which is why this installs the correct python (the one defined above)
    pkgs.pipenv
    pip
    pkgs.nodePackages.pyright
    python-language-server
    selenium
    # pkgs.zlib
    #pkgs.zlib.dev
    # nur-no-pkgs.repos.moritzschaefer.python3Packages.cytoflow
  ];
  # environment.variables.LD_LIBRARY_PATH = with pkgs; "$LD_LIBRARY_PATH:${stdenv.cc.cc.lib}/lib/libstdc++.so.6";  # TODO doesnt work anymore because of libgl 
}
#+end_src

#+name: flake-overlays
#+begin_src nix
( let
    myOverride = {
      packageOverrides = _self: _super: {
        service-factory =_super.buildPythonPackage rec {
          pname = "service_factory";
          version = "0.1.6";
          propagatedBuildInputs = [ _super.pytest ];
          doCheck = false;
          src = _super.fetchPypi {
            inherit pname version;
            sha256 = "abd8e715e2d32ee83ea4bbe365d34e0f94e3068ec03683f09f4512f657e1cd64";
          };
        };
      
        json-rpc =_super.buildPythonPackage rec {
          pname = "json-rpc";
          version = "1.13.0";
          buildInputs = [ _super.pytest ];
          propagatedBuildInputs = [ _super.pytest ];
          doCheck = false;
          src = _super.fetchPypi {
            inherit pname version;
            sha256 = "def0dbcf5b7084fc31d677f2f5990d988d06497f2f47f13024274cfb2d5d7589";
          };
        };
        up-set-plot = _super.buildPythonPackage rec {
          pname = "UpSetPlot";
          version = "0.4.1";
          buildInputs = [ _super.pytestrunner ];
          propagatedBuildInputs = [ _super.matplotlib _super.pandas ];
          doCheck = false;
          src = _super.fetchPypi {
            inherit pname version;
            sha256 = "c1e23af4d90ca88d024cdea45dc3a84591cd97a80a6a3dfc18b5e7ad2b93944f";
          };
        };
        adjust-text = _super.buildPythonPackage rec {
          pname = "adjustText";
          version = "0.7.3";
          propagatedBuildInputs = [ _super.matplotlib _super.numpy ];
          doCheck = false;
          src = _super.fetchPypi {
            inherit pname version;
            sha256 = "b90e275a95b4d980cbbac7967914b8d66477c09bc346a0b3c9e2125bba664b06";
          };
        };
      };
    };
  in _self: _super: rec {
    # Add an override for each required python version. 
    # There’s currently no way to add a package that’s automatically picked up by 
    # all python versions, besides editing python-packages.nix
    python2 = _super.python2.override myOverride;
    python3 = _super.python3.override myOverride;
    python38 = _super.python38.override myOverride;
    python2Packages = python2.pkgs;
    python3Packages = python3.pkgs;
    # python37Packages = python37.pkgs;
    python38Packages = python38.pkgs;
  } )
#+end_src
** Clojure
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = with pkgs; [ clojure leiningen ];
}
#+end_src

** Libraries
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = with pkgs; [
    libGL
  ];
}
#+end_src
** Biotools
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = with pkgs; [
    bedtools
  ];
}
#+end_src

** Other terminal goodies
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = with pkgs; [
    tldr
    nmap
    sqlite
    gitAndTools.hub
    youtube-dl
    sshfs
    bash
    wget
    htop
    psmisc
    zip
    unzip
    unrar
    # p7zip marked as insecure
    bind
    file
    which
    utillinuxCurses
    powerstat
    pciutils
    ag
    ispell
    usbutils
    libv4l
    v4l-utils
    gparted
    etcher
    powerline-fonts
    xsel
    tree
    gitAndTools.diff-so-fancy
    gitAndTools.git-hub
    pypi2nix
    lsyncd
    gnupg
    imagemagick
    gdb
    ncdu


    patchelf

    cmake
    gnumake

  ];
  # environment.variables.NPM_CONFIG_PREFIX = "$HOME/.npm-global";
  # environment.variables.PATH = "$HOME/.npm-global/bin:$PATH";
}
#+end_src
** Man pages
This install a number of default man pages for the linux/posix system.
#+begin_src nix
{
  documentation = {
    man.enable = true;
    dev.enable = true;
  };

  environment.systemPackages = [
    pkgs.man-pages
    pkgs.stdman
    pkgs.posix_man_pages
    pkgs.stdmanpages
  ];
}
#+end_src
* Meta
** Setup

There is a =setup.sh= script in this directory. It just links all files to =$HOME=:
#+begin_src sh :shebang "#!/bin/sh" :tangle setup.sh :padline no
FILES=".vimrc .vim .nvimrc .nvim .gitconfig .zshrc .zsh .tmux.conf .Xresources .config/awesome .config/nvim .nethackrc .emacs.d .ssh bin .config/zathura .irssi .config/xkb .config/fish .msmtprc .notmuch-config .mbsyncrc .config/nixpkgs"

DEST=$1

if [ -z "$DEST" ]; then
    DEST="$HOME"
fi

BASE=$(cd "$(dirname "$0")" && pwd)

ask_install() {
    FILENAME=$1

    LINK="$DEST/$FILENAME"
    TARGET="$BASE/$FILENAME"

    if [ -e $LINK ]; then
        echo "$LINK exists. Skipping..."
    else
        read -r -p "Link $LINK to $TARGET? [y/N] " response
        case $response in
            [yY][eE][sS]|[yY])
                ln -v -s "$TARGET" "$LINK"
                ;;
        esac
    fi
}

for FILE in $FILES; do
    ask_install $FILE
done
#+end_src

*** Install fisherman
[[https://github.com/fisherman/fisherman][Fisherman]] is a plugin manager for fish.
#+begin_src sh :tangle setup.sh
if [ ! -e "$DEST/.config/fish/functions/fisher.fish" ]; then
    read -r -p "Install fisherman and all plugins? [y/N] " response
    case $response in
        [yY][eE][sS]|[yY])
            curl -Lo "$DEST/.config/fish/functions/fisher.fish" --create-dirs \
                https://raw.githubusercontent.com/fisherman/fisherman/master/fisher.fish
            fish -c fisher
            ;;
    esac
fi
#+end_src
* Private                                                             :crypt-:
